/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/15/2017
Description:	Creates the RoleToPermission table and respective stored procedures

*/


USE opendevtools;



--------------------------------------------------------------
-- Create table
--------------------------------------------------------------



CREATE TABLE `opendevtools`.`RoleToPermission` (
Id INT AUTO_INCREMENT,
UserRoleId INT,
PermissionId INT,
CONSTRAINT pk_RoleToPermission_Id PRIMARY KEY (Id)
,
CONSTRAINT fk_RoleToPermission_UserRoleId_User_Id FOREIGN KEY (UserRoleId) REFERENCES User (Id)
,
CONSTRAINT fk_RoleToPermission_PermissionId_Permission_Id FOREIGN KEY (PermissionId) REFERENCES Permission (Id)
);


--------------------------------------------------------------
-- Create default SCRUD sprocs for this table
--------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`RoleToPermission`.`Id` AS `Id`,
		`RoleToPermission`.`UserRoleId` AS `UserRoleId`,
		`RoleToPermission`.`PermissionId` AS `PermissionId`
	FROM `RoleToPermission`
	WHERE 		`RoleToPermission`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_LoadAll`()
BEGIN
	SELECT
		`RoleToPermission`.`Id` AS `Id`,
		`RoleToPermission`.`UserRoleId` AS `UserRoleId`,
		`RoleToPermission`.`PermissionId` AS `PermissionId`
	FROM `RoleToPermission`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Add`
(
	 IN paramUserRoleId INT,
	 IN paramPermissionId INT
)
BEGIN
	INSERT INTO `RoleToPermission` (UserRoleId,PermissionId)
	VALUES (paramUserRoleId, paramPermissionId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Update`
(
	IN paramId INT,
	IN paramUserRoleId INT,
	IN paramPermissionId INT
)
BEGIN
	UPDATE `RoleToPermission`
	SET UserRoleId = paramUserRoleId
		,PermissionId = paramPermissionId
	WHERE		`RoleToPermission`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `RoleToPermission`
	WHERE		`RoleToPermission`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Search`
(
	IN paramId INT,
	IN paramUserRoleId INT,
	IN paramPermissionId INT
)
BEGIN
	SELECT
		`RoleToPermission`.`Id` AS `Id`,
		`RoleToPermission`.`UserRoleId` AS `UserRoleId`,
		`RoleToPermission`.`PermissionId` AS `PermissionId`
	FROM `RoleToPermission`
	WHERE
		COALESCE(RoleToPermission.`Id`,0) = COALESCE(paramId,RoleToPermission.`Id`,0)
		AND COALESCE(RoleToPermission.`UserRoleId`,0) = COALESCE(paramUserRoleId,RoleToPermission.`UserRoleId`,0)
		AND COALESCE(RoleToPermission.`PermissionId`,0) = COALESCE(paramPermissionId,RoleToPermission.`PermissionId`,0);
END //
DELIMITER ;


