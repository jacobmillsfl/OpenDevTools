/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			11/19/2017
Description:	Creates the RoleToPermission table and respective stored procedures

*/


USE opendevtools;

DROP TABLE IF EXISTS `roletopermission`;
DROP PROCEDURE IF EXISTS `usp_RoleToPermission_LoadAll`;
DROP PROCEDURE IF EXISTS `usp_RoleToPermission_Search`;
DROP PROCEDURE IF EXISTS `usp_RoleToPermission_Add`;
DROP PROCEDURE IF EXISTS `usp_RoleToPermission_Load`;
DROP PROCEDURE IF EXISTS `usp_RoleToPermission_Delete`;
DROP PROCEDURE IF EXISTS `usp_RoleToPermission_Update`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `opendevtools`.`RoleToPermission` (
Id INT AUTO_INCREMENT,
userRoleId INT,
permissionId INT,
CONSTRAINT pk_RoleToPermission_Id PRIMARY KEY (Id)
,
CONSTRAINT fk_RoleToPermission_userRoleId_User_Id FOREIGN KEY (userRoleId) REFERENCES UserRole (Id)
,
CONSTRAINT fk_RoleToPermission_permissionId_Permission_Id FOREIGN KEY (permissionId) REFERENCES Permission (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`RoleToPermission`.`Id` AS `Id`,
		`RoleToPermission`.`userRoleId` AS `userRoleId`,
		`RoleToPermission`.`permissionId` AS `permissionId`
	FROM `RoleToPermission`
	WHERE 		`RoleToPermission`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_LoadAll`()
BEGIN
	SELECT
		`RoleToPermission`.`Id` AS `Id`,
		`RoleToPermission`.`userRoleId` AS `userRoleId`,
		`RoleToPermission`.`permissionId` AS `permissionId`
	FROM `RoleToPermission`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Add`
(
	 IN paramuserRoleId INT,
	 IN parampermissionId INT
)
BEGIN
	INSERT INTO `RoleToPermission` (userRoleId,permissionId)
	VALUES (paramuserRoleId, parampermissionId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Update`
(
	IN paramId INT,
	IN paramuserRoleId INT,
	IN parampermissionId INT
)
BEGIN
	UPDATE `RoleToPermission`
	SET userRoleId = paramuserRoleId
		,permissionId = parampermissionId
	WHERE		`RoleToPermission`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `RoleToPermission`
	WHERE		`RoleToPermission`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `opendevtools`.`usp_RoleToPermission_Search`
(
	IN paramId INT,
	IN paramuserRoleId INT,
	IN parampermissionId INT
)
BEGIN
	SELECT
		`RoleToPermission`.`Id` AS `Id`,
		`RoleToPermission`.`userRoleId` AS `userRoleId`,
		`RoleToPermission`.`permissionId` AS `permissionId`
	FROM `RoleToPermission`
	WHERE
		COALESCE(RoleToPermission.`Id`,0) = COALESCE(paramId,RoleToPermission.`Id`,0)
		AND COALESCE(RoleToPermission.`userRoleId`,0) = COALESCE(paramuserRoleId,RoleToPermission.`userRoleId`,0)
		AND COALESCE(RoleToPermission.`permissionId`,0) = COALESCE(parampermissionId,RoleToPermission.`permissionId`,0);
END //
DELIMITER ;


