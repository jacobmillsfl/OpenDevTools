<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/2/2017
Description:	Creates the DAL class for  BlogDetails table and respective stored procedures

*/



class BlogDetails {

    // This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
    protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

    /******************************************************************/
    // Properties
    /******************************************************************/

    protected $id;
    protected $title;
    protected $imgUrl;
    protected $createDate;
    protected $content;
    protected $commentUsername;
    protected $commentImgUrl;
    protected $commentDate;
    protected $commentContent;
    protected $createdByUsername;


    /******************************************************************/
    // Constructors
    /******************************************************************/
    public function __construct() {
        $argv = func_get_args();
        switch( func_num_args() ) {
            case 0:
                self::__constructBase();
                break;
            case 10:
                self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7], $argv[8], $argv[9] );
        }
    }


    public function __constructBase() {
        $this->id = 0;
        $this->title = "";
        $this->imgUrl = "";
        $this->createDate = "";
        $this->content = "";
        $this->commentUsername = "";
        $this->commentImgUrl = "";
        $this->commentDate = "";
        $this->commentContent = "";
        $this->createdByUsername = "";
    }


    public function __constructFull($paramId,$paramTitle,$paramImgUrl,$paramCreateDate,$paramContent,$paramCommentUsername,$paramCommentImgUrl,$paramCommentDate,$paramCommentContent,$paramCreatedByUsername) {
        $this->id = $paramId;
        $this->title = $paramTitle;
        $this->imgUrl = $paramImgUrl;
        $this->createDate = $paramCreateDate;
        $this->content = $paramContent;
        $this->commentUsername = $paramCommentUsername;
        $this->commentImgUrl = $paramCommentImgUrl;
        $this->commentDate = $paramCommentDate;
        $this->commentContent = $paramCommentContent;
        $this->createdByUsername = $paramCreatedByUsername;
    }


    /******************************************************************/
    // Accessors / Mutators
    /******************************************************************/

    public function getId(){
        return $this->id;
    }
    public function setId($value){
        $this->id = $value;
    }
    public function getTitle(){
        return $this->title;
    }
    public function setTitle($value){
        $this->title = $value;
    }
    public function getImgUrl(){
        return $this->imgUrl;
    }
    public function setImgUrl($value){
        $this->imgUrl = $value;
    }
    public function getCreateDate(){
        return $this->createDate;
    }
    public function setCreateDate($value){
        $this->createDate = $value;
    }
    public function getContent(){
        return $this->content;
    }
    public function setContent($value){
        $this->content = $value;
    }
    public function getCommentUsername(){
        return $this->commentUsername;
    }
    public function setCommentUsername($value){
        $this->commentUsername = $value;
    }
    public function getCommentImgUrl(){
        return $this->commentImgUrl;
    }
    public function setCommentImgUrl($value){
        $this->commentImgUrl = $value;
    }
    public function getCommentDate(){
        return $this->commentDate;
    }
    public function setCommentDate($value){
        $this->commentDate = $value;
    }
    public function getCommentContent(){
        return $this->commentContent;
    }
    public function setCommentContent($value){
        $this->commentContent = $value;
    }
    public function getCreatedByUsername(){
        return $this->createdByUsername;
    }
    public function setCreatedByUsername($value){
        $this->createdByUsername = $value;
    }


    /******************************************************************/
    // Public Methods
    /******************************************************************/

    private static function setNullValue($value){
        if ($value == "")
            return null;
        else
            return $value;
    }

    public static function loadBlogDetails($paramid) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_Blog_LoadBlogDetails(?)');
        $arg1 = BlogDetails::setNullValue($paramid);
        $stmt->bind_param('i',$arg1);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $blogDetails = new BlogDetails($row['id'],$row['title'],$row['imgUrl'],$row['createDate'],$row['content'],$row['commentUsername'],$row['commentImgUrl'],$row['commentDate'],$row['commentContent'],$row['createdByUsername']);
                $arr[] = $blogDetails;
            }
            return $arr;
        }
        else {
            $arr = array();
            return $arr;
        }
    }

}
