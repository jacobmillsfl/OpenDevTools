<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/19/2017
Description:	Creates the DAL class for  Forum table and respective stored procedures

*/



class Forum {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $id;
	protected $createdByUserId;
	protected $title;
	protected $content;
	protected $createDate;
	protected $forumCategoryId;
	protected $Views;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 7:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6] );
		}
	}


	public function __constructBase() {
		$this->id = 0;
		$this->createdByUserId = 0;
		$this->title = "";
		$this->content = "";
		$this->createDate = "";
		$this->forumCategoryId = 0;
		$this->Views = 0;
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramCreatedByUserId,$paramTitle,$paramContent,$paramCreateDate,$paramForumCategoryId,$paramViews) {
		$this->id = $paramId;
		$this->createdByUserId = $paramCreatedByUserId;
		$this->title = $paramTitle;
		$this->content = $paramContent;
		$this->createDate = $paramCreateDate;
		$this->forumCategoryId = $paramForumCategoryId;
		$this->Views = $paramViews;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->id;
	}
	public function setId($value){
		$this->id = $value;
	}
	public function getCreatedByUserId(){
		return $this->createdByUserId;
	}
	public function setCreatedByUserId($value){
		$this->createdByUserId = $value;
	}
	public function getTitle(){
		return $this->title;
	}
	public function setTitle($value){
		$this->title = $value;
	}
	public function getContent(){
		return $this->content;
	}
	public function setContent($value){
		$this->content = $value;
	}
	public function getCreateDate(){
		return $this->createDate;
	}
	public function setCreateDate($value){
		$this->createDate = $value;
	}
	public function getForumCategoryId(){
		return $this->forumCategoryId;
	}
	public function setForumCategoryId($value){
		$this->forumCategoryId = $value;
	}
	public function getViews(){
		return $this->Views;
	}
	public function setViews($value){
		$this->Views = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Forum_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['id']);
		 $this->setCreatedByUserId($row['createdByUserId']);
		 $this->setTitle($row['title']);
		 $this->setContent($row['content']);
		 $this->setCreateDate($row['createDate']);
		 $this->setForumCategoryId($row['forumCategoryId']);
		 $this->setViews($row['Views']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Forum_Add(?,?,?,?,?,?)');
		$arg1 = $this->getCreatedByUserId();
		$arg2 = $this->getTitle();
		$arg3 = $this->getContent();
		$arg4 = $this->getCreateDate();
		$arg5 = $this->getForumCategoryId();
		$arg6 = $this->getViews();
		$stmt->bind_param('isssii',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Forum_Update(?,?,?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getCreatedByUserId();
		$arg3 = $this->getTitle();
		$arg4 = $this->getContent();
		$arg5 = $this->getCreateDate();
		$arg6 = $this->getForumCategoryId();
		$arg7 = $this->getViews();
		$stmt->bind_param('iisssii',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Forum_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$forum = new Forum($row['id'],$row['createdByUserId'],$row['title'],$row['content'],$row['createDate'],$row['forumCategoryId'],$row['Views']);
				$arr[] = $forum;
			}
			return $arr;
		}
		else {
            $arr = array();
            return $arr;
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Forum_Delete(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramCreatedByUserId,$paramTitle,$paramContent,$paramCreateDate,$paramForumCategoryId,$paramViews) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Forum_Search(?,?,?,?,?,?,?)');
		$arg1 = Forum::setNullValue($paramId);
		$arg2 = Forum::setNullValue($paramCreatedByUserId);
		$arg3 = Forum::setNullValue($paramTitle);
		$arg4 = Forum::setNullValue($paramContent);
		$arg5 = Forum::setNullValue($paramCreateDate);
		$arg6 = Forum::setNullValue($paramForumCategoryId);
		$arg7 = Forum::setNullValue($paramViews);
		$stmt->bind_param('iisssii',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$forum = new Forum($row['id'],$row['createdByUserId'],$row['title'],$row['content'],$row['createDate'],$row['forumCategoryId'],$row['Views']);
				$arr[] = $forum;
			}
			return $arr;
		}
		else {
            $arr = array();
            return $arr;
		}
	}
}
