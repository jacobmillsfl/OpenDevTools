<?php
/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/15/2017
Description:	Creates the DAL class for  Users table and respective stored procedures

*/



class Users {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $id;
	protected $username;
	protected $password;
	protected $email;
	protected $bio;
	protected $location;
	protected $imgUrl;
	protected $githubUrl;
	protected $createDate;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 9:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7], $argv[8] );
		}
	}


	public function __constructBase() {
		$this->id = 0;
		$this->username = "";
		$this->password = "";
		$this->email = "";
		$this->bio = "";
		$this->location = "";
		$this->imgUrl = "";
		$this->githubUrl = "";
		$this->createDate = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramUsername,$paramPassword,$paramEmail,$paramBio,$paramLocation,$paramImgUrl,$paramGithubUrl,$paramCreateDate) {
		$this->id = $paramId;
		$this->username = $paramUsername;
		$this->password = $paramPassword;
		$this->email = $paramEmail;
		$this->bio = $paramBio;
		$this->location = $paramLocation;
		$this->imgUrl = $paramImgUrl;
		$this->githubUrl = $paramGithubUrl;
		$this->createDate = $paramCreateDate;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->id;
	}
	public function setId($value){
		$this->id = $value;
	}
	public function getUsername(){
		return $this->username;
	}
	public function setUsername($value){
		$this->username = $value;
	}
	public function getPassword(){
		return $this->password;
	}
	public function setPassword($value){
		$this->password = $value;
	}
	public function getEmail(){
		return $this->email;
	}
	public function setEmail($value){
		$this->email = $value;
	}
	public function getBio(){
		return $this->bio;
	}
	public function setBio($value){
		$this->bio = $value;
	}
	public function getLocation(){
		return $this->location;
	}
	public function setLocation($value){
		$this->location = $value;
	}
	public function getImgUrl(){
		return $this->imgUrl;
	}
	public function setImgUrl($value){
		$this->imgUrl = $value;
	}
	public function getGithubUrl(){
		return $this->githubUrl;
	}
	public function setGithubUrl($value){
		$this->githubUrl = $value;
	}
	public function getCreateDate(){
		return $this->createDate;
	}
	public function setCreateDate($value){
		$this->createDate = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Users_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['id']);
		 $this->setUsername($row['username']);
		 $this->setPassword($row['password']);
		 $this->setEmail($row['email']);
		 $this->setBio($row['bio']);
		 $this->setLocation($row['location']);
		 $this->setImgUrl($row['imgUrl']);
		 $this->setGithubUrl($row['githubUrl']);
		 $this->setCreateDate($row['createDate']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Users_Add(?,?,?,?,?,?,?,?)');
		$arg1 = $this->getUsername();
		$arg2 = $this->getPassword();
		$arg3 = $this->getEmail();
		$arg4 = $this->getBio();
		$arg5 = $this->getLocation();
		$arg6 = $this->getImgUrl();
		$arg7 = $this->getGithubUrl();
		$arg8 = $this->getCreateDate();
		$stmt->bind_param('ssssssss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Users_Update(?,?,?,?,?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getUsername();
		$arg3 = $this->getPassword();
		$arg4 = $this->getEmail();
		$arg5 = $this->getBio();
		$arg6 = $this->getLocation();
		$arg7 = $this->getImgUrl();
		$arg8 = $this->getGithubUrl();
		$arg9 = $this->getCreateDate();
		$stmt->bind_param('issssssss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Users_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$users = new Users($row['id'],$row['username'],$row['password'],$row['email'],$row['bio'],$row['location'],$row['imgUrl'],$row['githubUrl'],$row['createDate']);
				$arr[] = $users;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Users_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramUsername,$paramPassword,$paramEmail,$paramBio,$paramLocation,$paramImgUrl,$paramGithubUrl,$paramCreateDate) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Users_Search(?,?,?,?,?,?,?,?,?)');
		$arg1 = Users::setNullValue($paramId);
		$arg2 = Users::setNullValue($paramUsername);
		$arg3 = Users::setNullValue($paramPassword);
		$arg4 = Users::setNullValue($paramEmail);
		$arg5 = Users::setNullValue($paramBio);
		$arg6 = Users::setNullValue($paramLocation);
		$arg7 = Users::setNullValue($paramImgUrl);
		$arg8 = Users::setNullValue($paramGithubUrl);
		$arg9 = Users::setNullValue($paramCreateDate);
		$stmt->bind_param('issssssss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8,$arg9);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$users = new Users($row['id'],$row['username'],$row['password'],$row['email'],$row['bio'],$row['location'],$row['imgUrl'],$row['githubUrl'],$row['createDate']);
				$arr[] = $users;
			}
			return $arr;
		}
		else {
			return array();
		}
	}
}
